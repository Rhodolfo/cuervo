value = c(1,1,1)
)
estructura_pedidos_usa <- data.frame(
source = c('wine_and_spirits', 'próximo'),
target = c('usa', 'usa'),
value = c(1,1)
)
estructura_pedidos_row <- data.frame(
source = c('región_1', 'región_2', 'región_3', 'región_4', 'región_5'),
target = c('row', 'row', 'row', 'row', 'row'),
value = c(1,1,1,1,1)
)
links <- rbind(
estructura_pedidos_nacional,
estructura_pedidos_usa,
estructura_pedidos_row
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes=data.frame(name=c(as.character(links$source), as.character(links$target)) %>% unique())
links$IDsource=match(links$source, nodes$name)-1
links$IDtarget=match(links$target, nodes$name)-1
# prepare color scale: I give one specific color for each node.
my_color <- 'd3.scaleOrdinal() .domain(["moderno", "mayoreo","centros_de_consumo", "nacional", "wine_and_spirits", "próximo", "usa", "región_1", "región_2", "región_3", "región_4", "región_5", "row"]) .range(["green", "green" , "green", "green", "blue", "blue", "blue", "red", "red", "red", "red", "red", "red"])'
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color)
links$group = as.factor(c('inactivo','en_proceso', 'terminado','en_proceso','en_proceso','terminado','terminado','terminado','terminado','terminado'))
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
links
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes=data.frame(name=c(as.character(links$source), as.character(links$target)) %>% unique())
links$IDsource=match(links$source, nodes$name)-1
links$IDtarget=match(links$target, nodes$name)-1
links$group = as.factor(c('inactivo','en_proceso', 'terminado','en_proceso','en_proceso','terminado','terminado','terminado','terminado','terminado'))
# prepare color scale: I give one specific color for each node.
my_color <- 'd3.scaleOrdinal() .domain(["inactivo","en_proceso","terminado,"moderno", "mayoreo","centros_de_consumo", "nacional", "wine_and_spirits", "próximo", "usa", "región_1", "región_2", "región_3", "región_4", "región_5", "row"]) .range(["gray","red", "green","green", "green" , "green", "green", "blue", "blue", "blue", "red", "red", "red", "red", "red", "red"])'
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
estructura_pedidos_nacional <- data.frame(
source = c('moderno', 'mayoreo', 'centros_de_consumo'),
target = c('nacional', 'nacional', 'nacional'),
value = c(1,1,1)
)
estructura_pedidos_usa <- data.frame(
source = c('wine_and_spirits', 'próximo'),
target = c('usa', 'usa'),
value = c(1,1)
)
estructura_pedidos_row <- data.frame(
source = c('región_1', 'región_2', 'región_3', 'región_4', 'región_5'),
target = c('row', 'row', 'row', 'row', 'row'),
value = c(1,1,1,1,1)
)
links <- rbind(
estructura_pedidos_nacional,
estructura_pedidos_usa,
estructura_pedidos_row
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes=data.frame(name=c(as.character(links$source), as.character(links$target)) %>% unique())
links$IDsource=match(links$source, nodes$name)-1
links$IDtarget=match(links$target, nodes$name)-1
links$group = as.factor(c('inactivo','en_proceso', 'terminado','en_proceso','en_proceso','terminado','terminado','terminado','terminado','terminado'))
# prepare color scale: I give one specific color for each node.
my_color <- 'd3.scaleOrdinal() .domain(["inactivo","en_proceso","terminado,"moderno", "mayoreo","centros_de_consumo", "nacional", "wine_and_spirits", "próximo", "usa", "región_1", "región_2", "región_3", "región_4", "región_5", "row"]) .range(["gray","red", "green","green", "green" , "green", "green", "blue", "blue", "blue", "red", "red", "red", "red", "red", "red"])'
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
links
library(networkD3)
estructura_pedidos_nacional <- data.frame(
source = c('moderno', 'mayoreo', 'centros_de_consumo'),
target = c('nacional', 'nacional', 'nacional'),
value = c(1,1,1)
)
estructura_pedidos_usa <- data.frame(
source = c('wine_and_spirits', 'próximo'),
target = c('usa', 'usa'),
value = c(1,1)
)
estructura_pedidos_row <- data.frame(
source = c('región_1', 'región_2', 'región_3', 'región_4', 'región_5'),
target = c('row', 'row', 'row', 'row', 'row'),
value = c(1,1,1,1,1)
)
links <- rbind(
estructura_pedidos_nacional,
estructura_pedidos_usa,
estructura_pedidos_row
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes=data.frame(name=c(as.character(links$source), as.character(links$target)) %>% unique())
links$IDsource=match(links$source, nodes$name)-1
links$IDtarget=match(links$target, nodes$name)-1
links$group = as.factor(c('inactivo','en_proceso', 'terminado','en_proceso','en_proceso','terminado','terminado','terminado','terminado','terminado'))
# prepare color scale: I give one specific color for each node.
my_color <- 'd3.scaleOrdinal() .domain(["inactivo","en_proceso","terminado,"moderno", "mayoreo","centros_de_consumo", "nacional", "wine_and_spirits", "próximo", "usa", "región_1", "región_2", "región_3", "región_4", "región_5", "row"]) .range(["gray","red", "green","green", "green" , "green", "green", "blue", "blue", "blue", "red", "red", "red", "red", "red", "red"])'
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
# prepare color scale: I give one specific color for each node.
my_color <- 'd3.scaleOrdinal() .domain(["inactivo","en_proceso","terminado","moderno", "mayoreo","centros_de_consumo", "nacional", "wine_and_spirits", "próximo", "usa", "región_1", "región_2", "región_3", "región_4", "región_5", "row"]) .range(["gray","red", "green","green", "green" , "green", "green", "blue", "blue", "blue", "red", "red", "red", "red", "red", "red"])'
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
funcion_parametros_sankey <- function(){
pesos <- c(
proceso$nacionales_moderno,
proceso$nacionales_mayoreo,
proceso$nacionales_consumo,
proceso$nacionales_moderno + proceso$nacionales_mayoreo + proceso$nacionales_consumo,
proceso$usa_wine,
proceso$usa_proximo,
proceso$usa_wine + proceso$usa_proximo,
preceso$region1,
proceso$region2,
proceso$region3,
proceso$region4,
proceso$region5,
proceso$region1 + proceso$region2 + proceso$region3 + proceso$region4 + proceso$region5
)
return(r)
}
runApp()
runApp()
output$grafica_proceso <- renderPlotly(
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
)
sankeyNetwork(Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget", Value = "value", NodeID = "name", colourScale=my_color, LinkGroup="group")
runApp()
runApp()
runApp()
runApp()
runApp()
options(shiny.reactlog=TRUE)
runApp()
install.packages('highcharter')
data("globaltemp")
library(highcharter)
data("globaltemp")
x <- c("Min", "Median", "Max")
y <- sprintf("{point.%s}", c("lower", "median", "upper"))
tltip <- tooltip_table(x, y)
hchart(globaltemp, type = "columnrange",
hcaes(x = date, low = lower, high = upper, color = median)) %>%
hc_yAxis(tickPositions = c(-2, 0, 1.5, 2),
gridLineColor = "#B71C1C",
labels = list(format = "{value} C", useHTML = TRUE)) %>%
hc_tooltip(
useHTML = TRUE,
headerFormat = as.character(tags$small("{point.x: %Y %b}")),
pointFormat = tltip
) %>%
hc_add_theme(hc_theme_db())
head(globaltemp)
tail(globaltemp)
str(globaltemp)
datos_fill_rate <- data.frame(
fecha = as.Date(c('2018-01-01','2018-02-02','2018-03-03','2018-04-01','2018-05-01','2018-06-01','2018-07-01','2018-08-01','2018-09-01','2018-10-01','2018-11-01','2018-12-01','2019-01-01','2019-02-01','2019-03-01','2019-04-01','2019-05-01','2019-06-01','2019-07-01')),
fill_rate = runif(17,.6,.8)
)
datos_fill_rate <- data.frame(
fecha = as.Date(c('2018-01-01','2018-02-02','2018-03-03','2018-04-01','2018-05-01','2018-06-01','2018-07-01','2018-08-01','2018-09-01','2018-10-01','2018-11-01','2018-12-01','2019-01-01','2019-02-01','2019-03-01','2019-04-01','2019-05-01','2019-06-01','2019-07-01')),
fill_rate = runif(19,.6,.8)
)
tltip
head(globaltemp)
hchart(globaltemp, type = "columnrange",
hcaes(x = date, low = lower, high = upper, color = median)) %>%
hc_yAxis(tickPositions = c(-2, 0, 1.5, 2),
gridLineColor = "#B71C1C",
labels = list(format = "{value} C", useHTML = TRUE)) %>%
hc_tooltip(
useHTML = TRUE,
headerFormat = as.character(tags$small("{point.x: %Y %b}")),
pointFormat = tltip
) %>%
hc_add_theme(hc_theme_db())
hchart(
globaltemp,
type = 'columnrange',
hcaes(x = fecha,fill_rate = fill_rate, color = fill_rate)
) %>%
hcyAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value * 100} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'columnrange',
hcaes(x = fecha,fill_rate = fill_rate, color = fill_rate)
) %>%
hcyAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value * 100} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'columnrange',
hcaes(x = fecha,fill_rate = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value * 100} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'columnrange',
hcaes(x = fecha,y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value * 100} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
head(globaltemp)
summary(globaltemp)
hchart(
datos_fill_rate,
type = 'columnrange',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value  %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value  %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value * 100} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,.8,1),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
datos_fill_rate <- data.frame(
fecha = as.Date(c('2018-01-01','2018-02-02','2018-03-03','2018-04-01','2018-05-01','2018-06-01','2018-07-01','2018-08-01','2018-09-01','2018-10-01','2018-11-01','2018-12-01','2019-01-01','2019-02-01','2019-03-01','2019-04-01','2019-05-01','2019-06-01','2019-07-01')),
fill_rate = runif(19,60,80)
)
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_yAxis(
tickPositions = c(0,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "Fill Rate"
) %>%
hc_yAxis(
tickPositions = c(0,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "Fill Rate"
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "Fill Rate"
) %>%
hc_subtitle(
text = 'mensualmente'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> FILL RATE </span> de los pedidos"
) %>%
hc_subtitle(
text = 'mensualmente'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> FILL RATE </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE)
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> FILL RATE </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE),
text = 'bla'
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> FILL RATE </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE),
title = 'bla'
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> FILL RATE </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE),
title = list(text = "x Axis at top")
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> FILL RATE </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE),
title = list(text = "fill rate")
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> Fill Rate </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
labels = list(format = '{value} %', useHTML = TRUE),
title = list(text = "fill rate")
) %>%
hc_add_theme(hc_theme_monokai())
hchart(
datos_fill_rate,
type = 'line',
hcaes(x = fecha, y = fill_rate, color = fill_rate)
) %>%
hc_title(
text = "<span style=\"color:#e5b13a\"> Fill Rate </span> de los pedidos"
) %>%
hc_subtitle(
text = 'total'
) %>%
hc_yAxis(
tickPositions = c(0,20,40,60,80,100),
gridLineColor = '#99ccff',
type = 'line',
labels = list(format = '{value} %', useHTML = TRUE),
title = list(text = "fill rate")
) %>%
hc_add_theme(hc_theme_monokai())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('leaflet')
library(leaflet)
map <- leaflet(mexico)
mapa_mexico <- readOGR(dsn = tmp, layer = 'mexico', encoding = 'UTF-8')
library(rgdal)
install.packages('rgdal')
install.packages('rgdal')
install.packages('rgdal')
install.packages('sp')
install.packages('lattice')
install.packages("lattice")
install.packages('sp')
install.packages('rgdal')
library(rgdal)
library(leaflet)
mapa_mexico <- readOGR(dsn = tmp, layer = 'mexico', encoding = 'UTF-8')
tmp <- tempdir()
mapa_mexico <- readOGR(dsn = tmp, layer = 'mexico', encoding = 'UTF-8')
library(rgdal)
library(leaflet)
mapa_mexico <- readOGR(dsn = tmp, layer = 'mexico', encoding = 'UTF-8')
tmp <- tempdir()
url <- "http://personal.tcu.edu/kylewalker/data/mexico.zip"
file <- basename(url)
download.file(url, file)
unzip(file, exdir = tmp)
mexico <- readOGR(dsn = tmp, layer = "mexico", encoding = "UTF-8")
mexico
